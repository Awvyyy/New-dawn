extends Node
class_name InventoryManager

signal item_added(item_name: String, amount: int)
signal item_removed(item_name: String, amount: int)
signal inventory_updated()

var items: Dictionary = {}
var default_max_stack := 999

# --- –ë—ç—á–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã —ç–º–∏—Ç–∏—Ç—å inventory_updated 1 —Ä–∞–∑ –∑–∞ –∫–∞–¥—Ä ---
var _pending_changed_items: = {}          # Set (Dictionary acting as set) of item names changed this frame
var _scheduled_emit: bool = false

func _ready() -> void:
	print("‚úÖ InventoryManager initialized")

# ==============================
# ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê
# ==============================
func add_item(item_name: String, amount: int = 1, icon_path: String = "") -> void:
	if amount == 0:
		return

	if not items.has(item_name):
		items[item_name] = {
			"amount": 0,
			"max_stack": default_max_stack,
			"icon": icon_path
		}

	var prev = items[item_name]["amount"]
	items[item_name]["amount"] = clamp(prev + amount, 0, items[item_name]["max_stack"])

	emit_signal("item_added", item_name, amount)

	# –ü–æ–º–µ—Ç–∏—Ç—å item –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	_pending_changed_items[item_name] = true
	_schedule_inventory_update_if_needed()

	# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–¥—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
	print("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ:", amount, item_name, "| –≤—Å–µ–≥–æ:", items[item_name]["amount"], "| frame:", Engine.get_frames_drawn())

# ==============================
# ‚ûñ –£–î–ê–õ–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê
# ==============================
func remove_item(item_name: String, amount: int = 1) -> void:
	if not items.has(item_name):
		push_warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: %s" % item_name)
		return

	var prev = items[item_name]["amount"]
	items[item_name]["amount"] = max(prev - amount, 0)

	if items[item_name]["amount"] <= 0:
		items.erase(item_name)

	emit_signal("item_removed", item_name, amount)

	_pending_changed_items[item_name] = true
	_schedule_inventory_update_if_needed()

	print("üóë –£–¥–∞–ª–µ–Ω–æ:", amount, item_name, "| frame:", Engine.get_frames_drawn())

# ==============================
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ–¥–∏–Ω—ã–π —ç–º–∏—Ç
# ==============================
func _schedule_inventory_update_if_needed() -> void:
	# –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞
	if _scheduled_emit:
		return
	_scheduled_emit = true
	# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä, –∑–∞—Ç–µ–º —ç–º–∏—Ç–∏–º –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
	_emit_batched_update()

# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (await –≤–Ω—É—Ç—Ä–∏)
func _emit_batched_update() -> void:
	# –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞ (–æ–¥–∏–Ω frame), —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤—ã–∑–æ–≤—ã
	await get_tree().process_frame
	# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω
	var changed = []
	for k in _pending_changed_items.keys():
		changed.append(k)
	# –û—á–∏—Å—Ç–∏–º –Ω–∞–±–æ—Ä
	_pending_changed_items.clear()
	# –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –¥–æ —ç–º–∏—Ç–∞ ‚Äî –Ω–æ –º–æ–∂–Ω–æ —ç–º–∏—Ç–∏—Ç—å —Å–µ–π—á–∞—Å
	_scheduled_emit = false

	# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ –∫–∞–¥—Ä
	print("üîÅ inventory_updated (batched). changed:", changed, "frame:", Engine.get_frames_drawn())
	emit_signal("inventory_updated")

# ==============================
# üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê
# ==============================
func get_amount(item_name: String) -> int:
	if not items.has(item_name):
		return 0
	return int(items[item_name]["amount"])

# ==============================
# üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–†–ï–î–ú–ï–¢–û–í
# ==============================
func has_items(requirements: Dictionary) -> bool:
	for k in requirements.keys():
		if get_amount(k) < int(requirements[k]):
			return false
	return true

# ==============================
# üßÆ –í–´–ß–ï–°–¢–¨ –ù–ê–ë–û–† –ü–†–ï–î–ú–ï–¢–û–í (–¥–ª—è –∫—Ä–∞—Ñ—Ç–∞)
# ==============================
func consume_items(requirements: Dictionary) -> void:
	for k in requirements.keys():
		remove_item(k, int(requirements[k]))

# ==============================
# üìã –í–û–ó–í–†–ê–¢ –í–°–ï–ì–û –ò–ù–í–ï–ù–¢–ê–†–Ø (–¥–ª—è UI)
# ==============================
func get_all_items() -> Dictionary:
	return items.duplicate(true)
